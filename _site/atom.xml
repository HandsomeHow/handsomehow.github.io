<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

   <title>handsomehow</title>
   <link href="http://localhost:4000/atom.xml" rel="self" type="application/atom+xml"/>
   <link href="http://localhost:4000" rel="alternate" type="text/html" />
   <updated>2017-03-08T12:49:33+08:00</updated>
   <id>http://localhost:4000</id>
   <author>
     <name>handsomehow</name>
     <email>handsomehowyxh@gmail.com</email>
   </author>

   
   <entry>
     <title>玲珑杯Round#11</title>
     <link href="http://localhost:4000/%E5%A5%97%E9%A2%98/2017/03/08/%E7%8E%B2%E7%8F%91%E6%9D%AFRound-11.html"/>
     <updated>2017-03-08T00:00:00+08:00</updated>
     <id>http://localhost:4000/%E5%A5%97%E9%A2%98/2017/03/08/玲珑杯Round#11</id>
     <content type="html">&lt;p&gt;玲珑杯又大发善心发50个杯子了,这种好事怎么能错过呢&lt;/p&gt;
&lt;h3 id=&quot;problem-a&quot;&gt;&lt;a href=&quot;http://www.ifrog.cc/acm/problem/1096&quot;&gt;Problem A&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;n的范围非常小,所以我们枚举每一份的数量就好了&lt;/p&gt;

&lt;h3 id=&quot;problem-b&quot;&gt;&lt;a href=&quot;http://www.ifrog.cc/acm/problem/1097&quot;&gt;Problem B&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;我们可以定义DP[i][j]表示前i个B工厂,前j个A工厂情况下,做多能建多少个桥,那么DP[i][j] = max(dp[i-1][l]) + 1 (l &amp;lt; j),但是这样的话复杂度是O(n^2)的.不过我们发现,转移时涉及的区间是连续的,所以我们可以用线段树/树状数组维护一下就好了,复杂度降到了O(nlogn)&lt;/p&gt;

&lt;h3 id=&quot;problem-d&quot;&gt;&lt;a href=&quot;http://www.ifrog.cc/acm/problem/1099&quot;&gt;Problem D&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;显然,经过一次f(x)以后,这个数不会超过9&lt;em&gt;9&lt;/em&gt;9,然后爆搜一下就好了&lt;/p&gt;

&lt;h3 id=&quot;problem-e&quot;&gt;&lt;a href=&quot;http://www.ifrog.cc/acm/problem/1100&quot;&gt;Problem E&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;我们定义DP[i][j]为长度为i的串,且末尾匹配了j位的个数,然后我们枚举最后一位,计算他会转移到DP[i+1][k].
k我们可以提前用KMP或者AC自动机预处理一下,总复杂度O(n^2)&lt;/p&gt;

&lt;h3 id=&quot;problem-f&quot;&gt;&lt;a href=&quot;http://www.ifrog.cc/acm/problem/1101&quot;&gt;Problem F&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;因为相邻两个点颜色都是不同的,所以我们只需要判断每条边的两个断点颜色是否相同以及是否有交叉的边.
交叉的边我们可以通过判断一条边的两个端点是否都在另一条边的统一端&lt;/p&gt;

&lt;h3 id=&quot;problem-h&quot;&gt;&lt;a href=&quot;http://www.ifrog.cc/acm/problem/1103&quot;&gt;Problem h&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;这个题好像和B是同一个题,只不过B种的转移方程DP[i][j] = max(dp[i-1][l]) + 1 (k &amp;lt; i, l &amp;lt; j)改成DP[i][j] = max(dp[i-1][l] + a[j] + b[i])  (k &amp;lt; i, l &amp;lt; j) 即可&lt;/p&gt;

</content>
   </entry>
   
   <entry>
     <title>第一篇博客</title>
     <link href="http://localhost:4000/others/2017/03/07/hello-world.html"/>
     <updated>2017-03-07T01:20:11+08:00</updated>
     <id>http://localhost:4000/others/2017/03/07/hello-world</id>
     <content type="html">&lt;p&gt;hello the crule world&lt;/p&gt;

</content>
   </entry>
   

</feed>
